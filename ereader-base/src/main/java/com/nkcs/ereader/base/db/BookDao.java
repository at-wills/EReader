package com.nkcs.ereader.base.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nkcs.ereader.base.entity.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Hash = new Property(2, String.class, "hash", false, "HASH");
        public final static Property Path = new Property(3, String.class, "path", false, "PATH");
        public final static Property Cover = new Property(4, String.class, "cover", false, "COVER");
        public final static Property Format = new Property(5, String.class, "format", false, "FORMAT");
        public final static Property TotalChapter = new Property(6, Integer.class, "totalChapter", false, "TOTAL_CHAPTER");
        public final static Property HasFormat = new Property(7, Boolean.class, "hasFormat", false, "HAS_FORMAT");
        public final static Property Created = new Property(8, java.util.Date.class, "created", false, "CREATED");
        public final static Property PinTopDate = new Property(9, java.util.Date.class, "pinTopDate", false, "PIN_TOP_DATE");
        public final static Property LastReadChapter = new Property(10, Integer.class, "lastReadChapter", false, "LAST_READ_CHAPTER");
        public final static Property LastReadPage = new Property(11, Integer.class, "lastReadPage", false, "LAST_READ_PAGE");
        public final static Property Progress = new Property(12, Double.class, "progress", false, "PROGRESS");
    }

    private DaoSession daoSession;


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"HASH\" TEXT," + // 2: hash
                "\"PATH\" TEXT," + // 3: path
                "\"COVER\" TEXT," + // 4: cover
                "\"FORMAT\" TEXT," + // 5: format
                "\"TOTAL_CHAPTER\" INTEGER," + // 6: totalChapter
                "\"HAS_FORMAT\" INTEGER," + // 7: hasFormat
                "\"CREATED\" INTEGER," + // 8: created
                "\"PIN_TOP_DATE\" INTEGER," + // 9: pinTopDate
                "\"LAST_READ_CHAPTER\" INTEGER," + // 10: lastReadChapter
                "\"LAST_READ_PAGE\" INTEGER," + // 11: lastReadPage
                "\"PROGRESS\" REAL);"); // 12: progress
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_BOOK_HASH ON \"BOOK\"" +
                " (\"HASH\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(3, hash);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(6, format);
        }
 
        Integer totalChapter = entity.getTotalChapter();
        if (totalChapter != null) {
            stmt.bindLong(7, totalChapter);
        }
 
        Boolean hasFormat = entity.getHasFormat();
        if (hasFormat != null) {
            stmt.bindLong(8, hasFormat ? 1L: 0L);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(9, created.getTime());
        }
 
        java.util.Date pinTopDate = entity.getPinTopDate();
        if (pinTopDate != null) {
            stmt.bindLong(10, pinTopDate.getTime());
        }
 
        Integer lastReadChapter = entity.getLastReadChapter();
        if (lastReadChapter != null) {
            stmt.bindLong(11, lastReadChapter);
        }
 
        Integer lastReadPage = entity.getLastReadPage();
        if (lastReadPage != null) {
            stmt.bindLong(12, lastReadPage);
        }
 
        Double progress = entity.getProgress();
        if (progress != null) {
            stmt.bindDouble(13, progress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String hash = entity.getHash();
        if (hash != null) {
            stmt.bindString(3, hash);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        String cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(5, cover);
        }
 
        String format = entity.getFormat();
        if (format != null) {
            stmt.bindString(6, format);
        }
 
        Integer totalChapter = entity.getTotalChapter();
        if (totalChapter != null) {
            stmt.bindLong(7, totalChapter);
        }
 
        Boolean hasFormat = entity.getHasFormat();
        if (hasFormat != null) {
            stmt.bindLong(8, hasFormat ? 1L: 0L);
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(9, created.getTime());
        }
 
        java.util.Date pinTopDate = entity.getPinTopDate();
        if (pinTopDate != null) {
            stmt.bindLong(10, pinTopDate.getTime());
        }
 
        Integer lastReadChapter = entity.getLastReadChapter();
        if (lastReadChapter != null) {
            stmt.bindLong(11, lastReadChapter);
        }
 
        Integer lastReadPage = entity.getLastReadPage();
        if (lastReadPage != null) {
            stmt.bindLong(12, lastReadPage);
        }
 
        Double progress = entity.getProgress();
        if (progress != null) {
            stmt.bindDouble(13, progress);
        }
    }

    @Override
    protected final void attachEntity(Book entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hash
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // format
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // totalChapter
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // hasFormat
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // created
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // pinTopDate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // lastReadChapter
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // lastReadPage
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12) // progress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHash(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFormat(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalChapter(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setHasFormat(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setCreated(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setPinTopDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setLastReadChapter(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setLastReadPage(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setProgress(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
